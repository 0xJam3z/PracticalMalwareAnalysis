Lab 5-1

1. What is the address of DllMain?

'.text:1000D02E'

2. Use the Imports window to browse to gethostbyname. Where is the import
located?

'.idata:100163CC'

3. How many functions call gethostbyname?

It's called 9 times by 5 different functions.

4. Focusing on the call to gethostbyname located at 0x10001757, can you figure out which DNS request will be made?

'pics.practicalmalwareanalysis.com'

5. How many local variables has IDA Pro recognized for the subroutine at
0x10001656?

23

6. How many parameters has IDA Pro recognized for the subroutine at
0x10001656?

1. lpThreadParameter

7. Use the Strings window to locate the string \cmd.exe /c in the disassembly.
Where is it located?

10095B34

8. What is happening in the area of code that references \cmd.exe /c?

cmd.exe /c carries out string commands provided. Viewing in the assembly it clearly says it's a remote shell session in xdoors_d:10095B44

9. In the same area, at 0x100101C8, it looks like dword_1008E5C4 is a global
variable that helps decide which path to take. How does the malware set
dword_1008E5C4? (Hint: Use dword_1008E5C4â€™s cross-references.)

Cross-referencing we find that it is comparing to see if Windows is using Win32NT. If so, it'll execute command.exe if not, it will execute the later
version which is cmd.exe.

10. A few hundred lines into the subroutine at 0x1000FF58, a series of comparisons use memcmp to compare strings. What happens if the string comparison to robotwork is successful (when memcmp returns 0)?

If memcmp is 0, the registry keys are queried and sent over to the remote shell. This is indicated by viewing calls from within the subroutine with values of RegOPenKeyExA,
RegQueryValueExA, calls to other sub routines with values such as 'malloc' and 'send.'

11. What does the export PSLIST do?

Grabs Version platform information (_OSVERSIONINFOA) via sub call to verify if platform is win32_NT or dwMajorVersion 5, if it matches it's going to push 1.
EAX is set to 1 via pop eax call directly after push 1. This ensures we're running on one of the platforms stated above. If not, we return 0 and exit.
If valid, the code will grab a process name and ID. The next call made reveals an "xinstall.dll." From my assessment we are getting information
from the process and going to be working with xinstall.dll. Further investigation reveals we're enumerating through running processes although it's unknown
where the data is going. Given the information provided, I'd make the assumption we are gathering information on a process and sending the data back to
the remote shell.

12. Use the graph mode to graph the cross-references from sub_10004E79.
Which API functions could be called by entering this function? Based on
the API functions alone, what could you rename this function?

GetSystemDefaultLangID, sprintf, strlen, and a sub which includes send, malloc, free, _imp_strlen. We could potentially name this sub
"LanguageIdentifier"


13. How many Windows API functions does DllMain call directly? How many
at a depth of 2?

4 at depth 1. At depth 2, 17.

14. At 0x10001358, there is a call to Sleep (an API function that takes one
parameter containing the number of milliseconds to sleep). Looking
backward through the code, how long will the program sleep if this code
executes?

30000 ms or 30 seconds.

15. At 0x10001701 is a call to socket. What are the three parameters?

2, 1, 6

16. Using the MSDN page for socket and the named symbolic constants functionality in IDA Pro, can you make the parameters more meaningful?
What are the parameters after you apply changes?

IDA has provided the following before using MSDN: af: 2, type: 1, protocol: 6.
To make the parameters more meaning full using MSDN we could change the symbolic constants to
2 ; AF_INET
1 ; SOCK_STREAM
6 ; IPPROTO_TCP

17. Search for usage of the in instruction (opcode 0xED). This instruction is used with a magic string VMXh to perform VMWare detection. Is that in use
in this malware? Using the cross-references to the function that executes the in instruction, is there further evidence of VMWare detection?

We run across the hex value "564D5868h" which in ASCII is VMXh. Going up to subprocess and viewing we see a string "Found Virtual Machine, Install Cancel."

18. Jump your cursor to 0x1001D988. What do you find?

Random bytes.

19. If you have the IDA Python plugin installed, run Lab05-01.py. What happens after you run the script?

The random bytes change to a readable format of "xdoor is this backdoor, string decoded for practical malware analysis lab"

20. With the cursor in the same location, how do you turn this data into a single ASCII string?

Pressing A

21. Open the script with a text editor. How does it work?

It pulls the memory addresses specified, performs a bitwise XOR operation between the byte and the constant 0x55. It then patches the addressed locations.
